<ui:composition
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:p="http://primefaces.org/ui"
        xmlns:f="http://java.sun.com/jsf/core"
        template="baseTemplate.xhtml"
        >

    <ui:define name="head">
    </ui:define>

    <ui:define name="content">

        <p:ajaxStatus>
            <f:facet name="default">
                <h:outputText value="Idle" style="visibility: hidden; height: 20px;"/>
            </f:facet>

            <f:facet name="start">
                <h:outputText value="Loading..." style="height: 20px;"/>
            </f:facet>

            <f:facet name="complete">
                <h:outputText value="Idle" style="visibility: hidden; height: 20px;"/>
            </f:facet>

        </p:ajaxStatus>

        <h:form prependId="false">

            <p:panelGrid columns="10">

                <p:outputLabel for="currentFile" value="Current File"/>
                <h:selectOneMenu id="currentFile" value="#{annotatorData.currentFileId}">
                    <f:selectItems value="#{annotator.allFileIds}" var="fileId" itemLabel="#{fileId}"
                                   itemValue="#{fileId}"/>
                    <p:ajax process="@this" update="@form :scriptContainer" listener="#{annotator.onFileSelect}"/>
                </h:selectOneMenu>

                <p:commandLink value="← Previous page" action="#{annotator.previousPage}"
                                               disabled="#{not annotator.previousPageAvailable}"
                                               process="@this" update="@form :scriptContainer"/>

                <p:outputLabel for="currentPage" value="Current Page"/>
                <h:inputText id="currentPage" value="#{annotatorData.currentPageNumber}">
                    <p:ajax process="@this" update="@form :scriptContainer" listener="#{annotator.onPageSelect}"/>
                </h:inputText>

                <p:commandLink value="Next page →" action="#{annotator.nextPage}"
                               disabled="#{not annotator.nextPageAvailable}"
                               process="@this" update="@form :scriptContainer"/>

                <p:commandLink value="Force flush" action="#{annotator.forceFlush}"
                               process="@this" update="@this"/>
            </p:panelGrid>


            <!--<div id="imagecropper" class="imagecropper"></div>-->
            <canvas id="canvas"></canvas>

        </h:form>


        <!--hidden form to execute remote commands-->
        <h:form prependId="false" style="visibility: hidden">
            <p:remoteCommand name="createNewAnnotationBridge" actionListener="#{annotator.createNewAnnotation}"
                             update="@none" process="@this"
                             oncomplete="onAnnotationCreateComplete(xhr,status,args);"/>
        </h:form>

    </ui:define>

    <ui:define name="script">
        <h:outputScript name="annotate.js"/>

        <h:panelGroup id="scriptContainer">

            <script>
                var annotations = [
                    {
                        id: 'asdasdasd',
                        'x': 10,
                        'y': 20,
                        'w': 100,
                        'h': 200,
                        'textData': {
                            'tr_latin': 'Kolay',
                            'tr_arabic': ' الف'
                        }
                    },
                    {
                        id: 'asdasdasd2',
                        'x': 20,
                        'y': 30,
                        'w': 400,
                        'h': 400,
                        'textData': {
                            'tr_latin': 'Kolay2',
                            'tr_arabic': '2 الف'
                        }
                    }
                ];

                function createNewAnnotation(x, y, w, h, textData) {
                    // sample text data:
                    //{
                    //    'tr_latin' : 'Kolay',
                    //    'tr_arabic' : ' الف'
                    //}
                    createNewAnnotationBridge([
                        {name: 'x', value: x},
                        {name: 'y', value: y},
                        {name: 'w', value: w},
                        {name: 'h', value: h},
                        {name: 'tr_latin', value: textData.tr_latin},
                        {name: 'tr_arabic', value: textData.tr_arabic}
                    ]);
                }

                function updateAnotation(annotationId, textData) {
                    console.log(annotationId);
                    console.log(textData)
                }

                function deleteAnnotation(annotationId) {
                    console.log(annotationId);
                }

                function onAnnotationCreateComplete(xhr, status, args) {
                    if (args.annotationId) {
                        console.log(args.annotationId);
                        annotator.addAnnotationFromCurrentOne(args.annotationId);
                    } else {
                        alert('Creation failed');
                    }
                }


                $(document).ready(function () {
                    window['annotator'] = new Annotator({
                        'canvasId': 'canvas',
                        'imageSource': 'http://www.html5canvastutorials.com/demos/assets/darth-vader.jpg',
                        'onAnnotationCreate': createNewAnnotation,
                        'onAnnotationUpdate': updateAnotation,
                        'onAnnotationDelete': deleteAnnotation,
                        'annotations': annotations
                    });

                });
            </script>
        </h:panelGroup>
    </ui:define>

</ui:composition>